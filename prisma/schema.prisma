generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                 String             @id @default(uuid())
  email                  String             @unique
  passwordHash           String             @map("password_hash")
  firstName              String             @map("first_name")
  lastName               String             @map("last_name")
  orgType                OrgType            @map("org_type")
  blockchainIdentity     String?            @map("blockchain_identity")
  phone                  String?
  lastLogin              DateTime?          @map("last_login")
  isActive               Boolean            @default(true) @map("is_active")
  createdAt              DateTime           @default(now()) @map("created_at")
  updatedAt              DateTime           @updatedAt @map("updated_at")
  latitude               Float?
  location               String?
  longitude              Float?
  organizationId         String             @map("organization_id")
  
  // Relations
  organization           Organization       @relation(fields: [organizationId], references: [organizationId])
  collectionEvents       CollectionEvent[]
  farmerCollectionEvents CollectionEvent[]  @relation("FarmerEvents")
  uploadedDocuments      Document[]
  finishedGoods          FinishedGood[]
  qrCodes                QRCode[]
  rawMaterialBatches     RawMaterialBatch[]
  processingEvents       SupplyChainEvent[]

  @@map("users")
}

model Organization {
  organizationId        String             @id @default(uuid()) @map("organization_id")
  type                  OrgType
  
  // Relations
  users                 User[]
  fromSupplyChainEvents SupplyChainEvent[] @relation("FromLocation")
  toSupplyChainEvents   SupplyChainEvent[] @relation("ToLocation")

  @@map("organizations")
}

model HerbSpecies {
  speciesId          String              @id @default(uuid()) @map("species_id")
  commonName         String              @map("common_name")
  scientificName     String              @unique @map("scientific_name")
  family             String?
  description        String?
  medicinalUses      String[]            @map("medicinal_uses")
  nativeRegions      String[]            @map("native_regions")
  harvestingSeason   String?             @map("harvesting_season")
  partsUsed          String[]            @map("parts_used")
  conservationStatus ConservationStatus? @map("conservation_status")
  regulatoryInfo     Json?               @map("regulatory_info")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  collectionEvents   CollectionEvent[]

  @@unique([commonName, scientificName], name: "species_name_unique")
  @@map("herb_species")
}

model CollectionEvent {
  eventId          String            @id @default(uuid()) @map("event_id")
  collectorId      String            @map("collector_id")
  farmerId         String?           @map("farmer_id")
  herbSpeciesId    String?           @map("herb_species_id")
  collectionDate   DateTime          @map("collection_date")
  location         String?
  latitude         Float?
  longitude        Float?
  quantity         Float?
  unit             String?
  qualityNotes     String?           @map("quality_notes")
  notes            String?
  batchId          String?           @map("batch_id")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  rawMaterialBatch RawMaterialBatch? @relation(fields: [batchId], references: [batchId])
  collector        User              @relation(fields: [collectorId], references: [userId])
  farmer           User?             @relation("FarmerEvents", fields: [farmerId], references: [userId])
  herbSpecies      HerbSpecies?      @relation(fields: [herbSpeciesId], references: [speciesId])
  documents        Document[]

  @@map("collection_events")
}

model RawMaterialBatch {
  batchId           String                    @id @default(uuid()) @map("batch_id")
  herbName          String                    @map("herb_name")
  scientificName    String?                   @map("scientific_name")
  quantity          Float
  unit              QuantityUnit
  status            RawMaterialBatchStatus    @default(CREATED)
  description       String?
  notes             String?
  currentOwnerId    String?                   @map("current_owner_id")
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  collectionEvents  CollectionEvent[]
  documents         Document[]
  composition       FinishedGoodComposition[]
  qrCodes           QRCode[]
  currentOwner      User?                     @relation(fields: [currentOwnerId], references: [userId])
  supplyChainEvents SupplyChainEvent[]        @relation("RawMaterialBatchEvents")

  @@map("raw_material_batches")
}

model SupplyChainEvent {
  eventId            String               @id @default(uuid()) @map("event_id")
  eventType          SupplyChainEventType @map("event_type")
  timestamp          DateTime             @default(now())
  handlerId          String               @map("handler_id")
  fromLocationId     String               @map("from_location_id")
  toLocationId       String               @map("to_location_id")
  rawMaterialBatchId String?              @map("raw_material_batch_id")
  finishedGoodId     String?              @map("finished_good_id")
  notes              String?
  custody            Json?
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  documents          Document[]
  qrCodes            QRCode[]
  finishedGood       FinishedGood?        @relation(fields: [finishedGoodId], references: [productId])
  fromLocation       Organization         @relation("FromLocation", fields: [fromLocationId], references: [organizationId])
  handler            User                 @relation(fields: [handlerId], references: [userId])
  rawMaterialBatch   RawMaterialBatch?    @relation("RawMaterialBatchEvents", fields: [rawMaterialBatchId], references: [batchId])
  toLocation         Organization         @relation("ToLocation", fields: [toLocationId], references: [organizationId])

  @@map("supply_chain_events")
}

model FinishedGood {
  productId         String                    @id @default(uuid()) @map("product_id")
  productName       String                    @map("product_name")
  productType       FinishedGoodProductType   @map("product_type")
  quantity          Float
  unit              QuantityUnit
  manufacturerId    String                    @map("manufacturer_id")
  description       String?
  batchNumber       String?                   @map("batch_number")
  expiryDate        DateTime?                 @map("expiry_date")
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  documents         Document[]
  composition       FinishedGoodComposition[]
  manufacturer      User                      @relation(fields: [manufacturerId], references: [userId])
  qrCodes           QRCode[]
  supplyChainEvents SupplyChainEvent[]

  @@map("finished_goods")
}

model FinishedGoodComposition {
  id                 String           @id @default(uuid())
  finishedGoodId     String           @map("finished_good_id")
  rawMaterialBatchId String           @map("raw_material_batch_id")
  percentage         Float
  quantityUsed       Float            @map("quantity_used")
  createdAt          DateTime         @default(now()) @map("created_at")
  finishedGood       FinishedGood     @relation(fields: [finishedGoodId], references: [productId])
  rawMaterialBatch   RawMaterialBatch @relation(fields: [rawMaterialBatchId], references: [batchId])

  @@map("finished_good_composition")
}

model Document {
  documentId         String            @id @default(uuid()) @map("document_id")
  fileName           String?           @map("file_name")
  filePath           String            @map("file_path")
  fileSize           Int               @map("file_size")
  mimeType           String            @map("mime_type")
  documentType       DocumentType      @map("document_type")
  description        String?
  uploadedBy         String?           @map("uploaded_by")
  isPublic           Boolean           @default(false) @map("is_public")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  collectionEventId  String?           @map("collection_event_id")
  rawMaterialBatchId String?           @map("raw_material_batch_id")
  supplyChainEventId String?           @map("supply_chain_event_id")
  finishedGoodId     String?           @map("finished_good_id")
  collectionEvent    CollectionEvent?  @relation(fields: [collectionEventId], references: [eventId])
  finishedGood       FinishedGood?     @relation(fields: [finishedGoodId], references: [productId])
  rawMaterialBatch   RawMaterialBatch? @relation(fields: [rawMaterialBatchId], references: [batchId])
  supplyChainEvent   SupplyChainEvent? @relation(fields: [supplyChainEventId], references: [eventId])
  uploadedByUser     User?             @relation(fields: [uploadedBy], references: [userId])

  @@map("documents")
}

model QRCode {
  qrCodeId           String            @id @default(uuid()) @map("qr_code_id")
  qrHash             String            @unique @map("qr_hash")
  entityType         QREntityType      @map("entity_type")
  entityId           String            @map("entity_id")
  generatedBy        String?           @map("generated_by")
  customData         Json?             @map("custom_data")
  scanCount          Int               @default(0) @map("scan_count")
  lastScannedAt      DateTime?         @map("last_scanned_at")
  isActive           Boolean           @default(true) @map("is_active")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  rawMaterialBatchId String?           @map("raw_material_batch_id")
  finishedGoodId     String?           @map("finished_good_id")
  supplyChainEventId String?           @map("supply_chain_event_id")
  finishedGood       FinishedGood?     @relation(fields: [finishedGoodId], references: [productId])
  generatedByUser    User?             @relation(fields: [generatedBy], references: [userId])
  rawMaterialBatch   RawMaterialBatch? @relation(fields: [rawMaterialBatchId], references: [batchId])
  supplyChainEvent   SupplyChainEvent? @relation(fields: [supplyChainEventId], references: [eventId])

  @@map("qr_codes")
}

enum OrgType {
  FARMER
  MANUFACTURER
  LABS
  DISTRIBUTOR
}

enum RawMaterialBatchStatus {
  CREATED
  IN_PROCESSING
  PROCESSED
  QUARANTINED
}

enum SupplyChainEventType {
  PROCESSING
  TESTING
  TRANSFER
  STORAGE
  PACKAGING
}

enum FinishedGoodProductType {
  POWDER
  CAPSULE
  TABLET
  SYRUP
  OIL
  CREAM
}

enum DocumentType {
  CERTIFICATE
  PHOTO
  INVOICE
  REPORT
  TEST_RESULT
  LICENSE
  OTHER
}

enum QREntityType {
  RAW_MATERIAL_BATCH
  FINISHED_GOOD
  SUPPLY_CHAIN_EVENT
}

enum ConservationStatus {
  LEAST_CONCERN
  NEAR_THREATENED
  VULNERABLE
  ENDANGERED
  CRITICALLY_ENDANGERED
}

enum QuantityUnit {
  KG
  TONNES
  GRAMS
  POUNDS
  PIECES
  BOTTLES
  BOXES
}
